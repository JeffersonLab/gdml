# -*-Makefile-*-
# $Id: package.gmk,v 1.11 2005/05/12 20:35:58 jmccormi Exp $
#
# Package build rules
#
# Package structure is:
# package -+
#          +- package         exported include files
#          +- src             source files + private include files
#          +- tests -+        unit tests
#                    +- test1 unit test directory, package settings are inherited
#                    :::
#                    ...
#                    +- testN
# 
# Package properties, must be set in the calling makefile, e.g.
# before this fragment is included.
#
# PROJECT_TOP  - the top level directory of the project
# PACKAGE_NAME - name of the package to be built (recursive)
# 
# Local variables
#
# package_tests - list of tests, automatically built
#

# Setup pkg vars.
include $(PROJECT_TOP)/config/make/project.gmk

# Setup local settings.
include $(PROJECT_CONFIG)/local_settings.gmk

# define package dirs
PACKAGE_DIR              := $(PROJECT_TOP)/$(SUBSYSTEM)/$(PACKAGE_NAME)
PACKAGE_BUILD_AREA       := $(PROJECT_BUILD_AREA)/$(PLATFORM)/$(SUBSYSTEM)/$(PACKAGE_NAME)

# package file lists
PACKAGE_SOURCE_FILES     := $(notdir $(wildcard src/*.cpp))
PACKAGE_OBJECT_FILES     := $(patsubst %.cpp,%.o,$(notdir $(wildcard src/*.cpp)))
PACKAGE_DEPENDENCY_FILES := $(patsubst %.cpp,%.d,$(notdir $(wildcard src/*.cpp)))

# Update the dependency & object files reflecting the build area location
PACKAGE_DEPENDENCY_FILES := $(addprefix $(PACKAGE_BUILD_AREA)/,$(PACKAGE_DEPENDENCY_FILES))
PACKAGE_OBJECT_FILES     := $(addprefix $(PACKAGE_BUILD_AREA)/,$(PACKAGE_OBJECT_FILES))

PROJECT_INCLUDES         += -I$(PACKAGE_DIR)

# flags
CPPFLAGS                 += $(PROJECT_INCLUDES)
CXXFLAGS                 += $(PROJECT_INCLUDES)
LDFLAGS                  += $(PROJECT_LINKER_FLAGS)

# Resolve the inter-package dependencies, the libs are added to test link flags as well
ifneq ($(REQUIRED_PACKAGES),)
CPPFLAGS                 += $(foreach package,$(REQUIRED_PACKAGES),-I$(PROJECT_TOP)/$(package) )
CXXFLAGS                 += $(foreach package,$(REQUIRED_PACKAGES),-I$(PROJECT_TOP)/$(package) )
LDFLAGS                  += -L$(PROJECT_TOP)/build/$(PLATFORM)/lib
LDFLAGS                  += $(foreach package,$(REQUIRED_PACKAGES),-l$(TARGET_LIB_PREFIX)$(notdir $(package)) )
endif

# Build package libraries
package_static_lib_name := $(PLATFORM_LIB_PREFIX)$(PACKAGE_NAME)$(PLATFORM_LIB_SUFFIX)
package_shared_lib_name := $(PLATFORM_SHLIB_PREFIX)$(PACKAGE_NAME)$(PLATFORM_SHLIB_SUFFIX)

VPATH := $(PACKAGE_DIR)/src $(PACKAGE_BUILD_AREA)

PACKAGE_TEST_IGNORED_DIRS     := %CVS
PACKAGE_TEST_DIRS             := $(filter-out $(PACKAGE_TEST_IGNORED_DIRS),$(wildcard $(PACKAGE_DIR)/tests/*))
PACKAGE_TESTS                 := $(notdir $(PACKAGE_TEST_DIRS))
PACKAGE_TEST_TARGETS          := $(addprefix $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests/test_$(SUBSYSTEM)_$(PACKAGE_NAME)_,$(PACKAGE_TESTS))
PACKAGE_TEST_STATIC_TARGETS   := $(addprefix $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests/test_static_$(SUBSYSTEM)_$(PACKAGE_NAME)_,$(PACKAGE_TESTS))
PACKAGE_TEST_DEPENDENCY_FILES := $(addprefix $(PACKAGE_BUILD_AREA)/tests/,$(foreach paktest,$(PACKAGE_TEST_DIRS),$(patsubst %.cpp,%.d,$(notdir $(wildcard $(paktest)/*.cpp)))))
PACKAGE_TEST_OBJECT_FILES     := $(addprefix $(PACKAGE_BUILD_AREA)/tests/,$(foreach paktest,$(PACKAGE_TEST_DIRS),$(patsubst %.cpp,%.o,$(notdir $(wildcard $(paktest)/*.cpp)))))

VPATH += $(PACKAGE_TEST_DIRS) $(PACKAGE_BUILD_AREA)/tests

# check if platform supports shared libs and user select this as an option
include $(PROJECT_CONFIG)/check_lib.gmk

# include external dependencies
include $(PROJECT_CONFIG)/ext_deps.gmk

# set target vars
static_lib := $(PROJECT_BUILD_AREA)/$(PLATFORM)/lib/$(package_static_lib_name)
shared_lib := $(PROJECT_BUILD_AREA)/$(PLATFORM)/lib/$(package_shared_lib_name)

shared_target            := package_info $(shared_lib) $(test_lib) package_done
static_target            := package_info $(static_lib) $(test_lib) package_done
shared_and_static_target := package_info $(static_lib) $(shared_lib) $(test_lib) package_done

static_test := $(PACKAGE_TEST_STATIC_TARGETS) 
shared_test := $(PACKAGE_TEST_LIBS)
shared_and_static_test := $(static_target_tests) $(shared_target_tests)

# set real package/lib target according to Autoconf selections...

# both static and shared
ifdef DO_BOTH_LIBS
  package_target := $(shared_and_static_target)
  test_lib       := $(shared_and_static_test)
else
  # shared only
  ifdef DO_SHARED_LIBS
    package_target := $(shared_target)
    test_lib       := $(shared_test)
  # static only (default)
  else
    package_target := $(static_target)
    test_lib       := $(static_test)
  endif
endif

# package target
$(PACKAGE_NAME)_target: $(package_target)

# phony target
.PHONY: build_$(SUBSYSTEM)_$(PACKAGE_NAME)_tests

# test target
build_$(SUBSYSTEM)_$(PACKAGE_NAME)_tests: $(test_lib)

.PHONY: $(package_static_lib_name)
$(PROJECT_BUILD_AREA)/$(PLATFORM)/lib/$(package_static_lib_name): $(PACKAGE_DEPENDENCY_FILES) $(PACKAGE_OBJECT_FILES)
	@echo
	@echo "Building static library $@ from:"
	@echo
	@test -d $(PROJECT_TOP)/build/$(PLATFORM)/lib || mkdir -pv $(PROJECT_TOP)/build/$(PLATFORM)/lib
	@ar crvs $@ $(PACKAGE_OBJECT_FILES)

.PHONY: $(package_shared_lib_name)
$(PROJECT_BUILD_AREA)/$(PLATFORM)/lib/$(package_shared_lib_name): $(PACKAGE_DEPENDENCY_FILES) $(PACKAGE_OBJECT_FILES)
	@echo
	@echo "Building shared library $@"
	@echo 
	@test -d $(PROJECT_TOP)/build/$(PLATFORM)/lib || mkdir -pv $(PROJECT_TOP)/build/$(PLATFORM)/lib
	@$(CXX) -o $@ $(CXXFLAGS) $(PLATFORM_SHLIB_FLAGS) $(PACKAGE_OBJECT_FILES) $(LDFLAGS)

.PHONY: package_info
package_info:
	@echo
	@echo "Building package $(PACKAGE_NAME) on site $(SITE) for platform $(PLATFORM)"
	@echo


.PHONY: package_done
package_done:
	@echo
	@echo "Package $(PACKAGE_NAME) built..."
	@echo

.PHONY: clean cleanall
# Clean only binary targets objects and libs
$(PACKAGE_NAME)_clean:
	@echo
	@echo "Cleaning package $(PACKAGE_NAME)"
	@echo
	@rm -rf $(wildcard $(PROJECT_TOP)/build/$(PLATFORM)/bin/*) \
         $(wildcard $(PROJECT_TOP)/build/$(PLATFORM)/lib/*) \
         $(PACKAGE_OBJECT_FILES) $(PACKAGE_TEST_OBJECT_FILES)

# Clean all including dependencies which will be rebuilt next time
$(PACKAGE_NAME)_cleanall:
	@echo
	@echo "Cleaning all for package $(PACKAGE_NAME)"
	@echo
	@rm -rf $(wildcard $(PROJECT_TOP)/build/$(PLATFORM)/bin/*) \
        $(wildcard $(PROJECT_TOP)/build/$(PLATFORM)/lib/*)
	@rm -rf $(PACKAGE_BUILD_AREA)

# Build package library dependency files
$(PACKAGE_BUILD_AREA)/%.d: %.cpp
	@test -d $(PACKAGE_BUILD_AREA) || mkdir -pv $(PACKAGE_BUILD_AREA)
	@echo "Making dependencies for $(notdir $<)"
	@$(SHELL) -ec \
   '$(CXX) -MM $(CPPFLAGS) $(addprefix $(CURDIR)/src/,$(notdir $<)) | sed -e '\''s@\(.*\)\(\.o\)\([ :]*\)@$(PACKAGE_BUILD_AREA)/\1\2 $(PACKAGE_BUILD_AREA)/\1.d\3@g'\'' > $@'

# Build package library object files from .cpp files
$(PACKAGE_BUILD_AREA)/%.o: %.cpp 
	@test -d $(PACKAGE_BUILD_AREA) || mkdir -pv $(PACKAGE_BUILD_AREA)
	@echo "Compiling $(notdir $<)"
	@$(CXX) -c -o $@ $< $(CXXFLAGS)

ifneq ($(strip $(PACKAGE_DEPENDENCY_FILES)),)
-include $(PACKAGE_DEPENDENCY_FILES)
endif

# Build package test executable files from .cpp files
$(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests/test_$(SUBSYSTEM)_$(PACKAGE_NAME)_%: %.o
	@test -d $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests || mkdir -pv $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests
	@echo "Building test $@"
	@$(CXX) -o $@ $< $(CXXFLAGS) $(PLATFORM_EXE_SHLIB_FLAGS) $(LDFLAGS) -L$(PROJECT_BUILD_AREA)/$(PLATFORM)/lib -l$(TARGET_LIB_PREFIX)$(PACKAGE_NAME)

# Build package static test executable files from .cpp files
$(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests/test_static_$(SUBSYSTEM)_$(PACKAGE_NAME)_%: %.o
	@test -d $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests || mkdir -pv $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests
	@echo "Building static test $@"
	@$(CXX) -static -o $@ $< $(CXXFLAGS) $(LDFLAGS) -L$(PROJECT_BUILD_AREA)/$(PLATFORM)/lib -l$(TARGET_LIB_PREFIX)$(PACKAGE_NAME)

# Build package test dependency files
$(PACKAGE_BUILD_AREA)/tests/%.d: %.cpp
	@test -d $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests || mkdir -pv $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests
	@test -d $(PACKAGE_BUILD_AREA)/tests || mkdir -pv $(PACKAGE_BUILD_AREA)/tests
	@echo "Making dependencies for $(notdir $<)"
	@$(SHELL) -ec \
   '$(CXX) -MM $(CPPFLAGS) -I$(dir $<) $< | sed -e '\''s@\(.*\)\(\.o\)\([ :]*\)@$(PACKAGE_BUILD_AREA)/tests/\1\2 $(PACKAGE_BUILD_AREA)/tests/\1.d\3@g'\'' > $@'

# Build package test object files from .cpp files
$(PACKAGE_BUILD_AREA)/tests/%.o: %.cpp 
	@test -d $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests || mkdir -pv $(PROJECT_BUILD_AREA)/$(PLATFORM)/bin/tests
	@test -d $(PACKAGE_BUILD_AREA)/tests || mkdir -pv $(PACKAGE_BUILD_AREA)/tests
	@echo "Compiling $(notdir $<)"
	@$(CXX) -c -o $@ $< $(CXXFLAGS) -I$(dir $<)

ifneq ($(strip $(PACKAGE_TEST_DEPENDENCY_FILES)),)
-include $(PACKAGE_TEST_DEPENDENCY_FILES)
endif

# End
