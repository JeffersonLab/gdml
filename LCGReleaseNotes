27.09.2007 - GDML_2_10-0
------------------------

Scaling was not considered in STEPWriter, caused compilation error.
The modified 'StructureCursor::addChild()' function has one more argument, the scaleRef what was
omitted.

31.08.2007 - GDML_2_10_0
------------------------
Scaling transformation added. With the help of scaling transformation, for example,
any kind of reflection can be implemented:

   <scale name="ScaleNPP" x="-1" y="+1" z="+1"/>   // Planar reflection with the local "X" plane
   <scale name="ScalePNN" x="+1" y="-1" z="-1"/>   // Axial reflection with the local "X" axis
   <scale name="ScaleNNN" x="-1" y="-1" z="-1"/>   // Point reflection with the local origin
   ...

Scaling transformation has the same properties like any other geometrical transformation
in GDML (rotation and translation respectively):
- it is done per volume
- it propagates down to the geometrical hierarchy
- it is done in the local coordinate system of the volume
- can be directly put into a physical volume or referenced, like:
     
   <scaleref ref="MyScale"/>

An example file is added ("scale.gdml") where an extruded solid is reflected into all octants 
of the local coordinate system, creating a diamond-like shape. This shape is driven trough a
complex transformation pipeline, involving multiple reflections, rotation and translation.

NOTE:
At the moment in Geant4 scaling can be used only for reflection!

30.07.2007 - GDML_2_9_0
-----------------------

>>GDML with Geant4 issues<<

This version of GDML must be linked with Geant4 9.0!
I have modified the "GDMLSetup" script, so Geant4 9.0
is linked by default.

(1)
Extruded solid ("xtru") added.

(2)
The following problem with the tessellated solid ("tessellated") is fixed:
It wasn't checked if the referenced vertices are defined or not. In 
case of undefined vertices a "Segmentation fault" message was displayed, 
what was quite helpless if we want to find the problem.
Now it looks, for example:
	"Error! Vertex "vertex0" is not defined in 'MyPyramid'!"

(3)
The warning messages regarding the materials are supressed now.


14.03.2007 - GDML_2_9_0
-----------------------

Improved 'loop' machinery. Now, any volume can be used in a loop (and
not only those created in another loop).

Added installation script facilitating the installation of the package
for the new users.

Added support for 'auxiliary' volume information and extended
'g4gogdml' to demonstrate the use of 'auxiliary' tag.

Added 'SimpleExtension' example showing how to extend GDML with
custom elements. The README of the example discusses in detail the
procedure one has to follow in order to makes extensions of GDML. 

Removed obsolete PyGDML package.

06.09.2006 - GDML_2_8_0
-----------------------

Added support for matrices:

  <matrix name="m" coldim="3" values="100000 200000 30000
                                      100000 500000 6000
                                      70000 8000 90000"/>
and loops:
 
  <variable name="i" value="1"/>
  ...

  <loop for="i" to="9" step="1">
   <box aunit="radian" lunit="mm" name="LoopBox" x="k[i]/2" y="la[i]" z="i*3" />
  </loop>

(see matricesandloops.gdml file in g4gogdml example).

Added support for optical surfaces as well as material property sheets 
(see opticalsurfaces.gdml file in g4gogdml example).

Improved handling of modular GDML files. It is now possible to choose
a specific volume from the included file to be positioned (with all its
daughter volumes) in the mother volume.
Added 'namespaces' for module files avoiding clashes of names.


14.08.2006 - GDML_2_7_0
-----------------------

New solids added: twisted box, twisted trap, twisted trd, twisted tubs.


New major feature: support for modularization of the GDML
files. 

Standalone GDML files, representing parts of the geometry, can
now be used within the other GDML files.
The syntax is the following:

<volume name="mother">
   <materialref ref="Iron"/>
   <solidref ref="MotherBox"/> 
   <physvol>
     <file name="child.gdml"/>
     <positionref ref="pos"/>
     <rotationref ref="rot"/>
   </physvol>
</volume>

where the 'file' element contains the name of the file to be
included. The top volume from that file becomes then the daughter
volume of the 'mother' volume.

14.07.2006 - GDML_2_6_0
-----------------------

The LCG release procedure for GDML has been simplified slightly. The
separate tags for CPPGDML and GDMLSchema will not be used anymore. The
common tag GDML_X_Y_Z will be the only one used. The Python GDML
processors will not be release anymore together with the rest of GDML
system. The GDML ROOT binding is now part of ROOT distribution and
therefore will not be further committed to GDML CVS.

This LCGReleaseNotes file will, from now on be the central 'release
information' holder for LCG releases. 

Main new elements in GDML_2_6_0 release:
	- added support for tessellated solids and tetrahedra
	- added (optional) STEPWriter enabling convertion form
	intermediate ST-Viewer files to GDML
	- several minor bugs fixed
	- small change in the G4Writer: the names of the generated
	GDML elements (solids, volumes, etc) are now appended with the
	object address converted to long int (instead of hex)
